$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: alogic
patterns:
  - include: "#include-directive"
  - include: "#struct-decl"
  - include: "#fsm-entity-decl"
  - include: "#network-entity-decl"
  - include: "#verbatim-entity-decl"
  - include: "#comment"
repository:
  include-directive:
    name: meta.include.alogic
    patterns:
      - match: (#include)\s(.*)
        captures:
          1:
            name: keyword.alogic
          2:
            patterns:
              - include: "#string"
  struct-decl:
    name: meta.struct.alogic
    begin: (struct+)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.struct.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#struct-body"
  struct-body:
    patterns:
      - include: "#field-decl"
      - include: "#comment"
  fsm-entity-decl:
    name: meta.fsm.alogic
    begin: (fsm)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.fsm.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#fsm-entity-body"
  singleton-fsm-entity-decl:
    name: meta.fsm.alogic
    begin: (new)\s+(fsm)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
    contentName: meta.fsm.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#fsm-entity-body"
  fsm-entity-body:
    patterns:
      - include: "#common-entity-body"
      - include: "#variable-decl"
      - include: "#fence-block"
      - include: "#function"
  network-entity-decl:
    name: meta.network.alogic
    begin: (network)\s+(\w+)\s*
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.network.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
        - include: "#common-entity-body"
        - include: "#port-assignment"
        - include: "#entity-instantiation"
        - include: "#singleton-fsm-entity-decl"
  verbatim-entity-decl:
    name: meta.verbatim.alogic
    begin: (verbatim)\s+(entity)\s+(\w+)\s*
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
    contentName: meta.verbatim.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#common-entity-body"
          - include: "#verbatim-verilog-block"
  verbatim-verilog-block:
    name: meta.verbatim.verilog.alogic
    begin: (verbatim)\s+(verilog)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        contentName: meta.embedded.block.verilog
        patterns:
          - include: "source.verilog"
  common-entity-body:
    patterns:
      - include: "#param-or-const-decl"
      - include: "#port-decl"
      - include: "#comment"
  port-decl:
    patterns:
      - include: "#in-port-decl"
      - include: "#out-port-decl"
  in-port-decl:
    name: meta.port.in.alogic
    match: (in)\s+(.+\s)?(\w+)\s+(\w+);
    captures:
      1:
        name: keyword.alogic
      2:
        patterns:
          - include: "#flow-control-type"
      3:
        name: entity.name.type.alogic
      4:
        name: variable.alogic
  out-port-decl:
    name: meta.port.out.alogic
    match: (out)\s+(.+\s)?(\w+)\s+(\w+);
    captures:
      1:
        name: keyword.alogic
      2:
        patterns:
          # This becomes more involved if you want to support storage types
          - include: "#flow-control-type"
      3:
        name: entity.name.type.alogic
      4:
        name: variable.alogic
  flow-control-type:
    name: keyword.alogic
    match: sync(\s+(ready|accept))?
  param-or-const-decl:
    name: meta.const.decl.alogic
    match: (param|const)\s+(\w+)\s+(\w+)\s*=\s*(.+);
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
      3:
        name: variable.alogic
      4:
        patterns:
          - include: "#literal"
  variable-decl:
    patterns:
     - include: "#field-decl"
     - name: meta.variable.decl.alogic
       match: (\w+)\s+(\w+)\s*=\s*(.+);
       captures:
         1:
           name: entity.name.type.alogic
         2:
           name: variable.alogic
         3:
           patterns:
             - include: "#expr"
  variable-assignment:
    name: meta.variable.assignment.alogic
    match: (\w+(?:\[.+\])?)\s*=\s*(.*);
    captures:
      1:
        patterns:
          - include: "#lvalue"
      2:
        patterns:
          - include: "#expr"
  expr:
    patterns:
      - include: "#variable-assignment"
      - include: "#method-invocation"
      - name: meta.operation.unary
        match: ([|&~])(.+)
        captures:
          1:
            name: keyword.operator.alogic
          2:
            patterns:
              - include: "#expr"
      - name: meta.expr.parenthetical.alogic
        match: \((.+)\)
        captures:
          1:
            patterns:
              - include: "#expr"
      - name: meta.operation.binary
        match: (.+)\s*(\+|-|\*|/|==|!=|>|>=|<|<=|&|\||^|&&|\|\|)\s*(.+)
        captures:
          1:
            patterns:
              - include: "#expr"
          2:
            name: keyword.operator.alogic
          3:
            patterns:
              - include: "#expr"
      - include: "#literal"
      - include: "#lvalue"
  lvalue:
    name: meta.lvalue.alogic
    match: (\w+)(?:\[(.+)])?
    captures:
      1:
        name: variable
      2:
        patterns:
          - include: "#slice"
  slice:
    name: meta.variable.slice.alogic
    patterns:
      - match: "(\\d+)([+-]?:)(\\d+)"
        captures:
          1:
            name: constant.numeric.alogic
          2:
            name: keyword.operator
          3:
            name: constant.numeric.alogic
      - match: \d+
        name: constant.numeric.alogic
  method-invocation:
    name: meta.function.invocation.alogic
    match: (\w+)\.(\w+)\s*\((.*)\)
    captures:
      1:
        name: variable.alogic
      2:
        name: entity.name.function
      3:
        patterns:
          - include: "#expr"
  if-stmt:
    name: meta.control.if.alogic
    match: (if)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  else-if-stmt:
    name: meta.control.elseif.alogic
    match: (else if)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  else-stmt:
    name: meta.control.else.alogic
    match: (else)
    captures:
      1:
        name: keyword.control.alogic
  while-stmt:
    name: meta.control.while.alogic
    match: (while)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  case-stmt:
    name: meta.control.case.alogic
    begin: (case)\s*\((.+)\)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#case-stmt-arm"
  case-stmt-arm:
    name: meta.control.case.arm.alogic
    begin: "(.+):"
    end: \}
    beginCaptures:
      1:
        patterns:
          - include: "#literal"
          - name: keyword.control.alogic
            match: default
    patterns:
      - begin: \{
        end: .?(?=\})
        contentName: meta.control.case.arm.body.alogic
        patterns:
          - include: "#stmt-block-body"
  field-decl:
    name: meta.field.decl.alogic
    match: (\w+)\s+(\w+);
    captures:
      1:
        name: entity.name.type.alogic
      2:
        name: variable.alogic
  fence-block:
    name: meta.block.fence.alogic
    begin: (fence)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
    contentName: meta.fence.block.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  function:
    name: meta.block.function.alogic
    begin: (void)\s+(\w+)\(\s*\)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.function.alogic
    contentName: meta.block.function.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  stmt-block:
    name: meta.block.stmt.alogic
    begin: \{
    end: \}
    contentName: meta.block.stmt.body.alogic
    patterns:
      - include: "#stmt-block-body"
  stmt-block-body:
    patterns:
      - include: "#stmt-block"
      - include: "#stmt"
      - include: "#comment"
  stmt:
    patterns:
      - include: "#variable-decl"
      - include: "#if-stmt"
      - include: "#else-if-stmt"
      - include: "#else-stmt"
      - include: "#while-stmt"
      - include: "#case-stmt"
      - include: "#loop-stmt"
      - include: "#goto-stmt"
      - include: "#fence-stmt"
      - include: "#expr-stmt"
  expr-stmt:
    name: meta.stmt.expr.alogic
    match: \b(.+);
    captures:
      1:
        patterns:
          - include: "#expr"
  loop-stmt:
    name: meta.control.loop.alogic
    match: (loop)
    captures:
      1:
        name: keyword.control.alogic
  fence-stmt:
    name: meta.control.fence.alogic
    match: (fence);
    captures:
      1:
        name: keyword.control.alogic
  goto-stmt:
    name: meta.control.goto.alogic
    match: (goto)\s+(\w+);
    captures:
      1:
        name: keyword.control.alogic
      2:
        name: entity.name.function
  entity-instantiation:
    match: (\w+)\s*=\s*(new)\s*(\w+)\s*\(\s*\)
    captures:
      1:
        name: variable.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
  port-assignment:
    match: ([a-zA-Z0-9_\.]+)\s*->\s*([a-zA-Z0-9_\.]+);
    captures:
      1:
        patterns:
          - include: "#port-reference"
      2:
        patterns:
          - include: "#port-reference"
  port-reference:
    match: (\w+)(?:\.(.+))?
    captures:
      1:
        name: variable.alogic
      2:
        patterns:
          - include: "#port-reference"
  literal:
    patterns:
      - include: "#number"
      - include: "#string"
  string:
    name: string.quoted.double.alogic
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.alogic
        match: \\.
  number:
    patterns:
      - name: constant.numeric.alogic
        match: \d*'b[01]+\b
      - name: constant.numeric.alogic
        match: \d*'d[0-9]+\b
      - name: constant.numeric.alogic
        match: \d*'h[0-9a-fA-F]+\b
      - name: constant.numeric.alogic
        match: \d+[^']
  comment:
    patterns:
      - name: comment
        match: //.*
      - begin: /\*
        end: \*/
scopeName: source.alogic
