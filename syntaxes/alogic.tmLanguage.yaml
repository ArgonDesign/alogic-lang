$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: alogic
patterns:
  - include: "#import-stmt"
  - include: "#from-import-stmt"
  - include: "#const-decl"
  - include: "#typedef-decl"
  - include: "#struct-decl"
  - include: "#fsm-entity-decl"
  - include: "#network-entity-decl"
  - include: "#verbatim-entity-decl"
  - include: "#function"
  - include: "#comment"
repository:
  import-stmt:
    name: meta.import.alogic
    match: (import)\s+(\".*\")(?:\s+(as)\s*(\w+))?;
    captures:
      1:
        name: keyword.alogic
      2:
        name: string.quoted.double.alogic
      3:
        name: keyword.alogic
      4:
        name: entity.name.type.alogic
  from-import-stmt:
    name: meta.import.alogic
    match: (from)\s+(\".*\")\s+(import)\s+(?:([a-zA-Z_][a-zA-Z0-9_\.]*)|(\*))(?:\s+(as)\s*(\w+))?;
    captures:
      1:
        name: keyword.alogic
      2:
        name: string.quoted.double.alogic
      3:
        name: keyword.alogic
      4:
        name: entity.name.type.alogic
      5:
        name: meta.import.all
      6:
        name: keyword.alogic
      7:
        name: entity.name.type.alogic
  typedef-decl:
    name: meta.typedef.alogic
    match: (typedef)\s+(\w+)\s+(\w+);
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
      3:
        name: entity.name.type.alogic
  struct-decl:
    name: meta.struct.alogic
    begin: (struct+)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.struct.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#struct-body"
  struct-body:
    patterns:
      - include: "#param-decl"
      - include: "#field-decl"
      - include: "#function"
      - include: "#comment"
      - include: "#gen-struct-body"
      - include: "#assert-stmt"
      - include: "#const-decl"
  gen-struct-body:
    name: meta.control.gen.alogic
    begin: (gen)\s+(if|for)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        name: keyword.control.alogic
    patterns:
      - begin: \(
        end: \)
        contentName: meta.control.gen.condition.alogic
      - begin: \{
        end: .?(?=\})
        contentName: meta.control.gen.struct.body.alogic
        patterns:
          - include: "#struct-body"
  fsm-entity-decl:
    name: meta.fsm.alogic
    begin: (fsm)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.fsm.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#fsm-entity-body"
  singleton-fsm-entity-decl:
    name: meta.fsm.alogic
    begin: (new)\s+(fsm)\s+(\w+)
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
    contentName: meta.fsm.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#fsm-entity-body"
  fsm-entity-body:
    patterns:
      - include: "#common-entity-body"
      - include: "#variable-decl"
      - include: "#fence-block"
      - include: "#function"
      - include: "#gen-fsm-body"
      - include: "#assert-stmt"
  gen-fsm-body:
    name: meta.control.gen.alogic
    begin: (gen)\s+(if|for)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        name: keyword.control.alogic
    patterns:
      - begin: \(
        end: \)
        contentName: meta.control.gen.condition.alogic
      - begin: \{
        end: .?(?=\})
        contentName: meta.control.gen.fsm.body.alogic
        patterns:
          - include: "#fsm-entity-body"
  network-entity-decl:
    name: meta.network.alogic
    begin: (network)\s+(\w+)\s*
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
    contentName: meta.network.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
        - include: "#network-entity-body"
  network-entity-body:
    patterns:
      - include: "#common-entity-body"
      - include: "#port-assignment"
      - include: "#entity-instantiation"
      - include: "#singleton-fsm-entity-decl"
      - include: "#gen-network-body"
  gen-network-body:
    name: meta.control.gen.alogic
    begin: (gen)\s+(if|for)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        name: keyword.control.alogic
    patterns:
      - begin: \(
        end: \)
        contentName: meta.control.gen.condition.alogic
      - begin: \{
        end: .?(?=\})
        contentName: meta.control.gen.network.body.alogic
        patterns:
          - include: "#network-entity-body"
  verbatim-entity-decl:
    name: meta.verbatim.alogic
    begin: (verbatim)\s+(entity)\s+(\w+)\s*
    end: \}
    captures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
    contentName: meta.verbatim.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#common-entity-body"
          - include: "#verbatim-verilog-block"
  verbatim-verilog-block:
    name: meta.verbatim.verilog.alogic
    begin: (verbatim)\s+(verilog)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        contentName: meta.embedded.block.verilog
        patterns:
          - include: "source.verilog"
  common-entity-body:
    patterns:
      - include: "#param-decl"
      - include: "#const-decl"
      - include: "#port-decl"
      - include: "#typedef-decl"
      - include: "#comment"
  port-decl:
    name: meta.port.in.alogic
    match: (in|out)\s+(.+\s)?(\w+)\s+(\w+)(?:#\[(\w+)\])?;
    captures:
      1:
        name: keyword.alogic
      2:
        patterns:
          - include: "#flow-control-type"
      3:
        name: entity.name.type.alogic
      4:
        name: variable.alogic
      5:
        name: variable.alogic
  flow-control-type:
    name: keyword.alogic
    match: sync(\s+(ready|accept))?
  const-decl:
    name: meta.const.decl.alogic
    match: (const)\s+(\w+)\s+(\w+)\s*=\s*(.+);
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
      3:
        name: variable.alogic
      4:
        patterns:
          - include: "#expr"
  param-decl:
    name: meta.const.decl.alogic
    match: (param)\s+(\w+)\s+(\w+)\s*(?:=\s*(.+))?;
    captures:
      1:
        name: keyword.alogic
      2:
        name: entity.name.type.alogic
      3:
        name: variable.alogic
      4:
        patterns:
          - include: "#literal"
  variable-decl:
    patterns:
     - include: "#field-decl"
     - name: meta.variable.decl.alogic
       match: (\w+)\s+(\w+)\s*=\s*(.+);
       captures:
         1:
           name: entity.name.type.alogic
         2:
           name: variable.alogic
         3:
           patterns:
             - include: "#expr"
  variable-assignment:
    name: meta.variable.assignment.alogic
    match: (\w+(?:\[.+\])?)\s*=\s*(.*);
    captures:
      1:
        patterns:
          - include: "#lvalue"
      2:
        patterns:
          - include: "#expr"
  expr:
    patterns:
      - include: "#method-invocation"
      - name: meta.expr.parenthetical.alogic
        match: \((.+)\)
        captures:
          1:
            patterns:
              - include: "#expr"
      - include: "#literal"
      - include: "#lvalue"
      - include: "#block-comment"
  lvalue:
    name: meta.lvalue.alogic
    match: ([a-zA-Z_]\w*)(?:\[(.+)])?
    captures:
      1:
        name: variable
      2:
        patterns:
          - include: "#slice"
  slice:
    name: meta.variable.slice.alogic
    patterns:
      - match: "(\\d+)([+-]?:)(\\d+)"
        captures:
          1:
            name: constant.numeric.alogic
          2:
            name: keyword.operator
          3:
            name: constant.numeric.alogic
      - match: \d+
        name: constant.numeric.alogic
  method-invocation:
    name: meta.function.invocation.alogic
    match: (\w+)\.(\w+)\s*\((.*)\)
    captures:
      1:
        name: variable.alogic
      2:
        name: entity.name.function
      3:
        patterns:
          - include: "#expr"
  if-stmt:
    name: meta.control.if.alogic
    match: (if)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  else-if-stmt:
    name: meta.control.elseif.alogic
    match: (else if)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  else-stmt:
    name: meta.control.else.alogic
    match: (else)
    captures:
      1:
        name: keyword.control.alogic
  while-stmt:
    name: meta.control.while.alogic
    match: (while)\s*\((.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
  do-while-stmt:
    name: meta.control.do-while.alogic
    begin: (do)\s*
    end: \}\s*(while)\s*\((.*)\);
    beginCaptures:
      1:
        name: keyword.control.alogic
    endCaptures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  let-stmt:
    name: meta.let.alogic
    match: (let)\s*\((\w+)\s+(\w+)\s*=\s*(.+)\)
    captures:
      1:
        name: keyword.control.alogic
      2:
        name: entity.name.type.alogic
      3:
        name: variable.alogic
      4:
        patterns:
          - include: "#expr"
  case-stmt:
    name: meta.control.case.alogic
    begin: (case)\s*\((.+)\)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#expr"
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#case-arm-block"
          - include: "#case-arm-stmt"
  case-arm-stmt:
    name: meta.control.case.arm.alogic
    begin: "(.+):"
    end: (?<=;)
    beginCaptures:
      1:
        patterns:
          - include: "#literal"
          - name: keyword.control.alogic
            match: default
    patterns:
      - include: "#stmt"
  case-arm-block:
    name: meta.control.case.arm.alogic
    begin: "(.+):\\s*{"
    end: \}
    beginCaptures:
      1:
        patterns:
          - include: "#literal"
          - name: keyword.control.alogic
            match: default
    patterns:
      - include: "#stmt-block-body"
  field-decl:
    name: meta.field.decl.alogic
    match: (\w+)\s+(\w+)(?:#\[(\w+)])?;
    captures:
      1:
        name: entity.name.type.alogic
      2:
        name: variable.alogic
      3:
        name: variable.alogic
  fence-block:
    name: meta.block.fence.alogic
    begin: (fence)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
    contentName: meta.fence.block.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  function:
    name: meta.block.function.alogic
    begin: (?:(static)\s+)?(\w+)\s+(\w+)\((.*)\)
    end: \}
    beginCaptures:
      1:
        name: keyword.alogic
      2:
        patterns:
          - match: void
            name: keyword.alogic
          - match: .*
            name: entity.name.type.alogic
      3:
        name: entity.name.function.alogic
      4:
        patterns:
          - include: "#argument-decl"
    contentName: meta.block.function.body.alogic
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  argument-decl:
    match: \s*(\w+)\s+(\w+)\s*(?:,(.*))?
    captures:
      1:
        name: entity.name.type.alogic
      2:
        name: variable
      3:
        patterns:
          - include: "#argument-decl"
  stmt-block:
    name: meta.block.stmt.alogic
    begin: \{
    end: \}
    contentName: meta.block.stmt.body.alogic
    patterns:
      - include: "#stmt-block-body"
  stmt-block-body:
    patterns:
      - include: "#stmt-block"
      - include: "#stmt"
      - include: "#comment"
  stmt:
    patterns:
      - include: "#if-stmt"
      - include: "#else-if-stmt"
      - include: "#else-stmt"
      - include: "#while-stmt"
      - include: "#do-while-stmt"
      - include: "#for-stmt"
      - include: "#case-stmt"
      - include: "#loop-stmt"
      - include: "#return-stmt"
      - include: "#goto-stmt"
      - include: "#fence-stmt"
      - include: "#break-stmt"
      - include: "#continue-stmt"
      - include: "#let-stmt"
      - include: "#gen-stmt-body"
      - include: "#assert-stmt"
      - include: "#expr-stmt"
      - include: "#variable-decl"
      - include: "#variable-assignment"
  expr-stmt:
    name: meta.stmt.expr.alogic
    match: \b(.+);
    captures:
      1:
        patterns:
          - include: "#expr"
  for-stmt:
    name: meta.control.for.alogic
    begin: (for)\s*\((.*;)(.*;)(.*)\)\s*
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        patterns:
          - include: "#variable-decl"
      3:
        patterns:
          - include: "#expr-stmt"
      4:
        patterns:
          - include: "#expr"
    patterns:
      - begin: \{
        end: .?(?=\})
        patterns:
          - include: "#stmt-block-body"
  loop-stmt:
    name: meta.control.loop.alogic
    match: (loop)
    captures:
      1:
        name: keyword.control.alogic
  fence-stmt:
    name: meta.control.fence.alogic
    match: (fence);
    captures:
      1:
        name: keyword.control.alogic
  break-stmt:
    name: meta.control.break.alogic
    match: (break);
    captures:
      1:
        name: keyword.control.alogic
  continue-stmt:
    name: meta.control.continue.alogic
    match: (continue);
    captures:
      1:
        name: keyword.control.alogic
  return-stmt:
    name: meta.control.return.alogic
    match: (return)\s+(:?(\w+))?;
    captures:
      1:
        name: keyword.control.alogic
      2:
        name: variable
  goto-stmt:
    name: meta.control.goto.alogic
    match: (goto)\s+(\w+);
    captures:
      1:
        name: keyword.control.alogic
      2:
        name: entity.name.function
  gen-stmt-body:
    name: meta.control.gen.alogic
    begin: (gen)\s+(if|for)
    end: \}
    beginCaptures:
      1:
        name: keyword.control.alogic
      2:
        name: keyword.control.alogic
    patterns:
      - begin: \(
        end: \)
        contentName: meta.control.gen.condition.alogic
      - begin: \{
        end: .?(?=\})
        contentName: meta.control.gen.body.alogic
        patterns:
          - include: "#stmt-block-body"
  assert-stmt:
    name: meta.assert.alogic
    begin: (static)?\s+(assert)
    end: ;
    beginCaptures:
      1:
        name: keyword.alogic
      2:
        name: keyword.alogic
    patterns:
      - include: "#expr"
      - include: "#string"
  entity-instantiation:
    name: meta.entity.instantiation.alogic
    match: (\w+)\s*=\s*(new)\s*(\w+)\s*\((.*)\);
    captures:
      1:
        name: variable.alogic
      2:
        name: keyword.alogic
      3:
        name: entity.name.type.alogic
      4:
        name: meta.entity.instantiation.params.alogic
        patterns:
          - include: "#param-def"
  param-def:
    match: (\w+)\s*=\s*([^,]+)(?:,(.*))?
    captures:
      1:
        name: variable.alogic
      2:
        patterns:
          - include: "#expr"
      3:
        patterns:
          - include: "#param-def"
  port-assignment:
    match: ([a-zA-Z0-9_\.]+)\s*->\s*([a-zA-Z0-9_\.]+);
    captures:
      1:
        patterns:
          - include: "#port-reference"
      2:
        patterns:
          - include: "#port-reference"
  port-reference:
    match: (\w+)(?:\.(.+))?
    captures:
      1:
        name: variable.alogic
      2:
        patterns:
          - include: "#port-reference"
  literal:
    patterns:
      - include: "#number"
      - include: "#string"
      - include: "#boolean"
  string:
    name: string.quoted.double.alogic
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.alogic
        match: \\.
  number:
    patterns:
      - name: constant.numeric.alogic
        match: \d*'b[01]+\b
      - name: constant.numeric.alogic
        match: \d*'d[0-9]+\b
      - name: constant.numeric.alogic
        match: \d*'h[0-9a-fA-F]+\b
      - name: constant.numeric.alogic
        match: \d+\b
  boolean:
    name: keyword.alogic
    match: (true|false)
  comment:
    patterns:
      - include: "#line-comment"
      - include: "#block-comment"
  line-comment:
    name: comment
    match: //.*
  block-comment:
    name: comment
    begin: /\*
    end: \*/
scopeName: source.alogic
