#include "salmon"

fsm cake
{
  param uint UNSIZED_BINARY = 'b01;
  param uint SIZED_BINARY = 8'b01;
  param uint UNSIZED_HEX = 'h0123456789aBcDeF;
  param uint SIZED_HEX = 8'h0123456789aBcDeF;
  param uint UNSIZED_DEC = 'd0123456789;
  param uint SIZED_DEC = 8'd0123456789;
  const uint FREE_NUMBER = 12345;
  const string FREE_STRING = "string";
  const thing_t other = cheese;

  in the hood;
  in sync cake_t cake;
  in sync ready cake_t cake;
  in sync accept cake_t cake;
  in sync greedy cake_t cake;

  out the hood;
  out sync cake_t cake;
  out sync ready cake_t cake;
  out sync accept cake_t cake;
  out sync greedy cake_t cake;

  uint fun_times = 19;

  void main()
  {
    u32 a;
    u32 b = 1;
    a = 1;
    fun_t badger = cake.read();
    if (badger) {
      salmon.write(1);
    } else if (a) {
      salmon.write(2);
    } else {
      salmon.write(3);
    }

    cheese.write(badger);
    while (cheese) {
      u8 cake = jam + sponge - butter_cream;
      u17 plam = |((cake && cheese) > &badger[12+:4]) - 'hAA;
    }

    loop {

    }

    case (quack) {
      12: {

      }
    }
    // What are the things that go here?
    fence;
  }

  fence
  {
    cheese = 1'b0;
  }

  fence {

  }

  // These shouldn't highlight

  new fsm singleton {

  }

  cake = new cake();

  in -> cake.in;
}

network net {
  in sync ready port_t port;
  out           bool   cake;

  param uint CHEESE = 1'h7;
  const i32 VALUE = 9;

  new fsm singleton {

  }

  cake = new cake();

  in -> cake.in;

  // These shouldn't highlight

  uint val;
  uint value = 4;

  void main() {

  }

  fence {

  }
}

verbatim entity arb {
  in  sync ready u8 i_0;
  in  sync ready u8 i_1;
  out sync ready u8 o;

  verbatim verilog {
    // i_0 has priority
    assign o = i_0__valid ? i_0 : i_1;
    assign o__valid = i_0__valid | i_1__valid;
    assign i_0__ready = o__ready;
    assign i_1__ready = o__ready & ~i_0__valid;
  }
}
