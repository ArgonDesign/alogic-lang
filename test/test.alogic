
const u8 cheese = 4;

import "cheese";
import "cheese" as cake;
import "cheese/fromage" as cabbage;

from "cake" import cheese;
from "cake/cheese" import something;
from "cake/cheese" import something as bread;

from "./cake" import cheese;
from "cake" import *;

bool my_combinational_func(u8 a, u2 b) {
  assert a != b, "Can't have a == b for some reason";
  if (a < b) {
    return a + b;
  } else {
    unreachable;
  }
}

struct intra_angle_est_bin_map_weight_output_t {
  param uint FOO;
  static assert FOO != 0, "Parameter FOO must not be zero";
  static assert FOO != 32,
    "Parameter FOO must not be 32, testing a multiline static assert";
  const uint FOO_BAR = FOO + 2;
  bool use128;
  u22 allowed_sizes; // for luma/chroma as required
  num_cands_t num_cands; // for luma/chroma as required
  bool chroma;
  gen for (uint p < GRAD_PARALLEL) {
    hist_bucket_idx_t bucket_idx#[p];
    hist_bin_idx_t bin_idx#[p]; // test comment
    grad_weight_t weight#[p];
  }

  static u3 get_allowed_sizes_0(u2 bar) {
    assert bar != 2, "Got bar == 2";
    const uint BAZ = 2;
    if (chroma) {
      return BAZ;
    } else {
      return 'allowed_sizes[0] + 'bar;
    }
  }

  bool get_chroma() {
    return chroma;
  }

  void increment_and_stuff() {
    if (num_cands == 4) {
      num_cands--;
      return;
    }
    num_cands++;
    if (get_chroma()) {
      num_cands -= 2;
    }
  }
}

const uint CLOG2_TEST = 1 + $clog2(FOO);
const uint BITS_TEST = 1 + @bits(FOO);
const uint MSB_TEST = 1 + @msb(FOO);

typedef intra_angle_est_bin_map_weight_output_t(FOO=1) foo_new_t;
typedef intra_angle_est_bin_map_weight_output_t(FOO=$clog2(5)) foo_new_t;

typedef uint(5) baz_t;

typedef u3 angle_delta_unsigned_t;
struct angle_delta_funcs {
  /* Function to map an unsigned delta (bin index within a bucket) to the
  absolute value of the signed delta this represents. */
  static u2 unsigned_to_abs_signed(angle_delta_unsigned_t d) {
    u2 output;
    i3 foo = @sx(3, 1);
    case (d) {
      3'd0, 3'd6: output = @ex(1'b1, 2, 1'b1); // hello
      // another hello
      3'd1, 3'd5: output = @zx(2, 1'b0); /* hello again */
      3'd2, 3'd4: output = 2'd1;
      default: {
        assert d == 3'd3;
        // hello
        output = 2'd0;
        break;
      }
    }
    return output;
  }
}

fsm cake
{
  // Comment
  param uint UNSIZED_BINARY = 'b01;
  param uint SIZED_BINARY = 8'b01;
  param uint UNSIZED_HEX = 'h0123456789aBcDeF;
  param uint SIZED_HEX = 8'h0123456789aBcDeF; // Comment
  param uint UNSIZED_DEC = 'd0123456789;
  param uint SIZED_DEC = 8'd0123456789;
  param uint UNSPECIFIED_PARAM;
  const uint FREE_NUMBER = 12345;
  const string FREE_STRING = "string";
  const thing_t other = cheese;

  in the hood;
  in sync cake_t cake;
  in sync ready cake_t cake;
  in sync accept cake_t cake;
  in sync greedy cake_t cake;

  out the hood;
  out sync cake_t cake;
  out sync ready cake_t cake;
  out sync accept cake_t cake;
  out sync greedy cake_t cake;
  out sync ready bubble cake_t cake;
  out sync ready bubble bubble cake_t cake;

  typedef u8 cheesy_cake_t;

  const uint BAZ = 8 % 5;

  uint fun_times = 19;

  u3 my_distributed_mem[5];

  u3[4 + MY_CONST] my_vector;
  u3[4] my_vector2 = 'hood;
  u3 [4 + MY_CONST] my_vector3;
  u3 [4] my_vector4 = 'hood;

  const u1[NUM_BSIZES_SUB_8X8_AND_SMALLER] log2_w4_8x8_rst_val = 4'hC;
  const u1 [NUM_BSIZES_SUB_8X8_AND_SMALLER] log2_w4_8x8_rst_val = 4'hC;

  uint(5 + @bits(hood)) foo;
  uint(@bits(xy4_sb_t) + 1)[4 + @bits(foo)] x4_rightmost_p1;

  const uint(5 + @bits(hood))[4 + @bits(my_var)] foo = 4'd5;

  gen if (a + (b + c)) {
    out sync ready u9 fun;
  }

  gen for (uint X = 0; X < cake; cake++) {
    in wire porty_mc_port_face#[X];
  }

  gen for (uint P < 8) {
    in wire porty_mc_port_face#[P];
  }

  static assert NUM_TIGERS > 7,
                "Need more tigers!";

  sram wire uint(2) store[79 * 6];
  sram bar_t store2[ANGLE_STORE_WORDS + @bits(foo)];

  gen if (MY_CONST < 5) {
    sram wire u1 store3[42];
  }

  /* A long comment */
  void main()
  {
    uint(@bits(xy4_sb_t) + 1) x4_rightmost_p1 = cfg.angle_cfg.use128 ? 6'd32 : 6'd16;
    const uint(5 + @bits(hood))[4 + @bits(my_var)] foo = 4'd5;
    wait cake.valid;
    u32 a;
    u32 b = 1;
    a = 1;
    a >>= 2;
    fun_t badger = cake.read();
    if (badger /* cake */) {
      salmon.write(1);
    } else if (a) {
      salmon.write(2);
    } else {
      salmon.write(3);
    }

    if (true) {

    }

    if (log2_w4_8x8_and_smaller[0] == 1'b1 && log2_h4_8x8_and_smaller[0] == 1'b1) {

    }

    assert cake >= cheese, "CAKE ISN'T BETTER THAN CHEESE!";

    foo = var[5 -: 2];
    foo = var[5:8];
    foo = var[@bits(baz)];
    foo = var[5 + 2 +: MY_CONST];
    foo = var[@bits(baz) +: 16 * 4];

    assert x4_rightmost_tmp[(@bits(x4_rightmost_tmp) - 1)] == 0,
          "Top bit of x4_rightmost_tmp must always be zero";
    xy4_sb_t x4_rightmost = x4_rightmost_tmp[0 +: @bits(xy4_sb_t)];

    for (uint i = 0; i < 7 /* cake */; ++i) {
      if (cheese) {
        bool grapes = true;
        break;
      } else {
        fence;
      }
    }

    do {

    } while (true /* cake */);

    gen if (a + (b + c)) {
      u8 a = (1 + 2);
    }

    gen for (uint X = 0; X < cake; cake++) {
      u8 a = (1 + 2);
    }

    gen for (uint P < 8) {
      u8 a = (1 + 2);
    }

    gen for (uint N < 2) {
      gen for (uint M < 4) {
        bool do_accum#[bucket_idx, bin_idx];
      }
    }

    cheese.write(badger);
    while (cheese) {
      u8 cake = jam + sponge - butter_cream;
      u17 plam = |((cake && cheese) > &badger[12+:4]) - 'hAA;
    }

    let (u3 i = 0) do {
      foo[i] = 0;
      i++;
    } while (i);

    loop {
      if (cheese) {
        continue;
      } else {
        break;
      }
    }

    case (quack) {
      12: {

      }
    }
    // What are the things that go here?
    fence;
  }

  fence
  {
    cheese = 1'b0;
  }

  fence {

  }

  // These shouldn't highlight

  new fsm singleton {

  }

  cake = new cake();

  in -> cake.in;
}

network net {
  in sync ready port_t port;
  out           bool   cake;

  param uint CHEESE = 1'h7;
  static assert CHEESE != 12, "CHEESE mustn't be a dozen";
  const i32 VALUE = 9;

  typedef u8 cheesy_cake2_t;

  gen if (a + (b + c)) {
    out sync ready u9 fun;
  }

  gen for (uint X = 0; X < cake; cake++) {
    in wire porty_mc_port_face;
  }

  gen for (uint P < 8) {
    in wire porty_mc_port_face;
  }

  new fsm singleton {

  }

  cake = new cake();

  cake2 = new cake(UNSIZED_BINARY = @bits(port_t));

  cheese = new cheese(with_chilli = true, cheese = 1'd8);

  in -> cake.in;

  // These shouldn't highlight

  uint val;
  uint value = 4;

  void main() {

  }

  fence {

  }

  sram wire uint(2) store[79 * 6];
  sram bar_t store2[ANGLE_STORE_WORDS + @bits(foo)];

  gen if (MY_CONST < 5) {
    sram wire u1 store3[42];
  }
}

verbatim entity arb {
  in  sync ready u8 i_0;
  in  sync ready u8 i_1;
  out sync ready u8 o;

  verbatim verilog {
    // i_0 has priority
    assign o = i_0__valid ? i_0 : i_1;
    assign o__valid = i_0__valid | i_1__valid;
    assign i_0__ready = o__ready;
    assign i_1__ready = o__ready & ~i_0__valid;
  }
}

// These shouldn't highlight

param u10 a_name = 7;

sram wire uint(2) store[79 * 6];
sram bar_t store2[ANGLE_STORE_WORDS + @bits(foo)];

gen if (MY_CONST < 5) {
  sram wire u1 store3[42];
}
